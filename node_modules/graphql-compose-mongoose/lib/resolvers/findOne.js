"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findOne = void 0;
const helpers_1 = require("./helpers");
const beforeQueryHelper_1 = require("./helpers/beforeQueryHelper");
function findOne(model, tc, opts) {
    if (!model || !model.modelName || !model.schema) {
        throw new Error('First arg for Resolver findOne() should be instance of Mongoose Model.');
    }
    if (!tc || tc.constructor.name !== 'ObjectTypeComposer') {
        throw new Error('Second arg for Resolver findOne() should be instance of ObjectTypeComposer.');
    }
    const aliases = helpers_1.prepareNestedAliases(model.schema);
    const aliasesReverse = helpers_1.prepareAliasesReverse(model.schema);
    return tc.schemaComposer.createResolver({
        type: tc,
        name: 'findOne',
        kind: 'query',
        args: Object.assign(Object.assign(Object.assign({}, helpers_1.filterHelperArgs(tc, model, Object.assign({ prefix: 'FilterFindOne', suffix: `${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Input` }, opts === null || opts === void 0 ? void 0 : opts.filter))), helpers_1.skipHelperArgs()), helpers_1.sortHelperArgs(tc, model, Object.assign({ sortTypeName: `SortFindOne${tc.getTypeName()}${(opts === null || opts === void 0 ? void 0 : opts.suffix) || ''}Input` }, opts === null || opts === void 0 ? void 0 : opts.sort))),
        resolve: ((resolveParams) => __awaiter(this, void 0, void 0, function* () {
            resolveParams.query = model.findOne({});
            resolveParams.model = model;
            helpers_1.filterHelper(resolveParams, aliases);
            helpers_1.skipHelper(resolveParams);
            helpers_1.sortHelper(resolveParams);
            helpers_1.projectionHelper(resolveParams, aliases);
            if (opts === null || opts === void 0 ? void 0 : opts.lean) {
                const result = yield beforeQueryHelper_1.beforeQueryHelperLean(resolveParams);
                return result && aliasesReverse ? helpers_1.replaceAliases(result, aliasesReverse) : result;
            }
            else {
                return beforeQueryHelper_1.beforeQueryHelper(resolveParams);
            }
        })),
    });
}
exports.findOne = findOne;
//# sourceMappingURL=findOne.js.map