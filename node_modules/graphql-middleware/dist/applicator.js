"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateResolverFromSchemaAndMiddleware = void 0;
const graphql_1 = require("graphql");
const utils_1 = require("./utils");
// Applicator
function wrapResolverInMiddleware(resolver, middleware) {
    return (parent, args, ctx, info) => middleware((_parent = parent, _args = args, _ctx = ctx, _info = info) => resolver(_parent, _args, _ctx, _info), parent, args, ctx, info);
}
function parseField(field) {
    const { isDeprecated } = field, restData = __rest(field, ["isDeprecated"]);
    const argsMap = field.args.reduce((acc, cur) => (Object.assign(Object.assign({}, acc), { [cur.name]: cur })), {});
    return Object.assign(Object.assign({}, restData), { args: argsMap });
}
function applyMiddlewareToField(field, options, middleware) {
    const parsedField = parseField(field);
    if (utils_1.isMiddlewareWithFragment(middleware) &&
        parsedField.resolve &&
        parsedField.resolve !== graphql_1.defaultFieldResolver) {
        return Object.assign(Object.assign({}, parsedField), { fragment: middleware.fragment, fragments: middleware.fragments, resolve: wrapResolverInMiddleware(parsedField.resolve, middleware.resolve) });
    }
    else if (utils_1.isMiddlewareWithFragment(middleware) && parsedField.subscribe) {
        return Object.assign(Object.assign({}, parsedField), { fragment: middleware.fragment, fragments: middleware.fragments, subscribe: wrapResolverInMiddleware(parsedField.subscribe, middleware.resolve) });
    }
    else if (utils_1.isMiddlewareResolver(middleware) &&
        parsedField.resolve &&
        parsedField.resolve !== graphql_1.defaultFieldResolver) {
        return Object.assign(Object.assign({}, parsedField), { resolve: wrapResolverInMiddleware(parsedField.resolve, middleware) });
    }
    else if (utils_1.isMiddlewareResolver(middleware) && parsedField.subscribe) {
        return Object.assign(Object.assign({}, parsedField), { subscribe: wrapResolverInMiddleware(parsedField.subscribe, middleware) });
    }
    else if (utils_1.isMiddlewareWithFragment(middleware) &&
        !options.onlyDeclaredResolvers) {
        return Object.assign(Object.assign({}, parsedField), { fragment: middleware.fragment, fragments: middleware.fragments, resolve: wrapResolverInMiddleware(graphql_1.defaultFieldResolver, middleware.resolve) });
    }
    else if (utils_1.isMiddlewareResolver(middleware) &&
        !options.onlyDeclaredResolvers) {
        return Object.assign(Object.assign({}, parsedField), { resolve: wrapResolverInMiddleware(graphql_1.defaultFieldResolver, middleware) });
    }
    else {
        return Object.assign(Object.assign({}, parsedField), { resolve: graphql_1.defaultFieldResolver });
    }
}
function applyMiddlewareToType(type, options, middleware) {
    const fieldMap = type.getFields();
    if (utils_1.isMiddlewareFunction(middleware)) {
        const resolvers = Object.keys(fieldMap).reduce((resolvers, fieldName) => (Object.assign(Object.assign({}, resolvers), { [fieldName]: applyMiddlewareToField(fieldMap[fieldName], options, middleware) })), {});
        return resolvers;
    }
    else {
        const resolvers = Object.keys(middleware).reduce((resolvers, field) => (Object.assign(Object.assign({}, resolvers), { [field]: applyMiddlewareToField(fieldMap[field], options, middleware[field]) })), {});
        return resolvers;
    }
}
function applyMiddlewareToSchema(schema, options, middleware) {
    const typeMap = schema.getTypeMap();
    const resolvers = Object.keys(typeMap)
        .filter((type) => utils_1.isGraphQLObjectType(typeMap[type]) &&
        !graphql_1.isIntrospectionType(typeMap[type]))
        .reduce((resolvers, type) => (Object.assign(Object.assign({}, resolvers), { [type]: applyMiddlewareToType(typeMap[type], options, middleware) })), {});
    return resolvers;
}
// Generator
function generateResolverFromSchemaAndMiddleware(schema, options, middleware) {
    if (utils_1.isMiddlewareFunction(middleware)) {
        return applyMiddlewareToSchema(schema, options, middleware);
    }
    else {
        const typeMap = schema.getTypeMap();
        const resolvers = Object.keys(middleware).reduce((resolvers, type) => (Object.assign(Object.assign({}, resolvers), { [type]: applyMiddlewareToType(typeMap[type], options, middleware[type]) })), {});
        return resolvers;
    }
}
exports.generateResolverFromSchemaAndMiddleware = generateResolverFromSchemaAndMiddleware;
//# sourceMappingURL=applicator.js.map